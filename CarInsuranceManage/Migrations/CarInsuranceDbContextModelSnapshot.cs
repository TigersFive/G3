// <auto-generated />
using System;
using CarInsuranceManage.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarInsuranceManage.Migrations
{
    [DbContext(typeof(CarInsuranceDbContext))]
    partial class CarInsuranceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CarInsuranceManage.Models.Claim", b =>
                {
                    b.Property<int>("claim_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("claim_id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("accident_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("claim_number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("claimable_amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("insured_amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("place_of_accident")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("policy_id")
                        .HasColumnType("int");

                    b.HasKey("claim_id");

                    b.HasIndex("policy_id");

                    b.ToTable("claims");

                    b.HasData(
                        new
                        {
                            claim_id = 1,
                            CreatedAt = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5911),
                            accident_date = new DateTime(2024, 11, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5913),
                            claim_number = "CLAIM12345",
                            claimable_amount = 8000.00m,
                            insured_amount = 10000.00m,
                            place_of_accident = "Downtown",
                            policy_id = 1
                        },
                        new
                        {
                            claim_id = 2,
                            CreatedAt = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5915),
                            accident_date = new DateTime(2024, 10, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5915),
                            claim_number = "CLAIM67890",
                            claimable_amount = 4000.00m,
                            insured_amount = 5000.00m,
                            place_of_accident = "Suburb",
                            policy_id = 2
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Comment", b =>
                {
                    b.Property<int>("comment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("comment_id"));

                    b.Property<string>("comment_text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<int?>("parent_comment_id")
                        .HasColumnType("int");

                    b.Property<int?>("rating")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("comment_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("parent_comment_id");

                    b.ToTable("comments");

                    b.HasData(
                        new
                        {
                            comment_id = 1,
                            comment_text = "Great service! Highly recommend this insurance.",
                            created_at = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5930),
                            customer_id = 2,
                            rating = 5,
                            status = "Active"
                        },
                        new
                        {
                            comment_id = 2,
                            comment_text = "Very affordable prices.",
                            created_at = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5932),
                            customer_id = 1,
                            rating = 4,
                            status = "Active"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Contact", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date_added")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("date_modified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.HasIndex("customer_id");

                    b.ToTable("contacts");

                    b.HasData(
                        new
                        {
                            id = 1,
                            customer_id = 2,
                            date_added = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(6056),
                            date_modified = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(6056),
                            email = "john.doe@example.com",
                            full_name = "John Doe",
                            message = "I want to inquire about renewing my insurance policy.",
                            phone = "0987654321",
                            status = true,
                            subject = "Inquiry about policy renewal"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Customer", b =>
                {
                    b.Property<int>("customer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("customer_id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("customer_id");

                    b.HasIndex("user_id");

                    b.ToTable("customers");

                    b.HasData(
                        new
                        {
                            customer_id = 1,
                            address = "123 Admin Street",
                            full_name = "Admin User",
                            phone_number = "0123456789",
                            user_id = 1
                        },
                        new
                        {
                            customer_id = 2,
                            address = "456 Main St, Cityville",
                            full_name = "John Doe",
                            phone_number = "0987654321",
                            user_id = 2
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.CustomerSupportRequest", b =>
                {
                    b.Property<int>("support_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("support_id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("resolved_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("resolved_by")
                        .HasColumnType("int");

                    b.Property<string>("support_description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("support_payment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("support_status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("support_type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("support_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("resolved_by");

                    b.ToTable("customer_support_requests");

                    b.HasData(
                        new
                        {
                            support_id = 1,
                            created_at = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(6020),
                            customer_id = 2,
                            support_description = "Need assistance with billing",
                            support_payment = "Paid",
                            support_status = "Open",
                            support_type = "Billing"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Estimate", b =>
                {
                    b.Property<int>("estimate_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("estimate_id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<decimal>("estimate_amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("policy_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("vehicle_id")
                        .HasColumnType("int");

                    b.Property<string>("warranty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("estimate_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("estimates");

                    b.HasData(
                        new
                        {
                            estimate_id = 1,
                            created_at = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5811),
                            customer_id = 2,
                            estimate_amount = 1500.00m,
                            policy_type = "Comprehensive",
                            vehicle_id = 1,
                            warranty = "3 years"
                        },
                        new
                        {
                            estimate_id = 2,
                            created_at = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5813),
                            customer_id = 1,
                            estimate_amount = 1000.00m,
                            policy_type = "Third-Party",
                            vehicle_id = 2,
                            warranty = "1 year"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.InsuranceHistory", b =>
                {
                    b.Property<int>("history_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("history_id"));

                    b.Property<DateTime>("change_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("change_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("changed_by")
                        .HasColumnType("int");

                    b.Property<string>("new_value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("old_value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("policy_id")
                        .HasColumnType("int");

                    b.HasKey("history_id");

                    b.HasIndex("changed_by");

                    b.HasIndex("policy_id");

                    b.ToTable("insurance_histories");

                    b.HasData(
                        new
                        {
                            history_id = 1,
                            change_date = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5985),
                            change_type = "Updated",
                            changed_by = 1,
                            new_value = "Policy Active",
                            old_value = "Initial",
                            policy_id = 1
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.InsurancePolicy", b =>
                {
                    b.Property<int>("policy_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("policy_id"));

                    b.Property<int?>("customer_id")
                        .HasColumnType("int");

                    b.Property<string>("payment_status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("policy_amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("policy_end_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("policy_number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("policy_start_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("policy_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("vehicle_id")
                        .HasColumnType("int");

                    b.HasKey("policy_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("insurance_policies");

                    b.HasData(
                        new
                        {
                            policy_id = 1,
                            customer_id = 2,
                            payment_status = "Paid",
                            policy_amount = 50.00m,
                            policy_end_date = new DateTime(2025, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5833),
                            policy_number = "POLICY12345",
                            policy_start_date = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5830),
                            policy_type = "Comprehensive",
                            vehicle_id = 1
                        },
                        new
                        {
                            policy_id = 2,
                            customer_id = 1,
                            payment_status = "Unpaid",
                            policy_amount = 70.00m,
                            policy_end_date = new DateTime(2025, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5844),
                            policy_number = "POLICY67890",
                            policy_start_date = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5844),
                            policy_type = "Third-Party",
                            vehicle_id = 2
                        },
                        new
                        {
                            policy_id = 3,
                            customer_id = 1,
                            payment_status = "Pending",
                            policy_amount = 90.00m,
                            policy_end_date = new DateTime(2025, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5847),
                            policy_number = "POLICY67890",
                            policy_start_date = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5847),
                            policy_type = "Third-Party",
                            vehicle_id = 2
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Notification", b =>
                {
                    b.Property<int>("notification_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("notification_id"));

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<bool>("is_read")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("message_content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("message_type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("sent_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("notification_id");

                    b.HasIndex("customer_id");

                    b.ToTable("notifications");

                    b.HasData(
                        new
                        {
                            notification_id = 1,
                            customer_id = 2,
                            is_read = false,
                            message_content = "Your insurance policy is about to expire.",
                            message_type = "Reminder",
                            sent_at = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(6039)
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Payment", b =>
                {
                    b.Property<int>("payment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("payment_id"));

                    b.Property<string>("bill_number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<decimal>("payment_amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("payment_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("payment_status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("policy_id")
                        .HasColumnType("int");

                    b.Property<string>("transaction_id")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("payment_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("policy_id");

                    b.ToTable("payments");

                    b.HasData(
                        new
                        {
                            payment_id = 1,
                            bill_number = "BILL12345",
                            customer_id = 2,
                            payment_amount = 1500.00m,
                            payment_date = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5892),
                            payment_status = "SUCCESS",
                            policy_id = 1,
                            transaction_id = "TXN123456789"
                        },
                        new
                        {
                            payment_id = 2,
                            bill_number = "BILL67890",
                            customer_id = 1,
                            payment_amount = 1000.00m,
                            payment_date = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5895),
                            payment_status = "FAILED",
                            policy_id = 2,
                            transaction_id = "TXN987654321"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Report", b =>
                {
                    b.Property<int>("report_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("report_id"));

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("generated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("report_type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("report_id");

                    b.ToTable("reports");

                    b.HasData(
                        new
                        {
                            report_id = 1,
                            description = "Monthly revenue report for car insurance sales.",
                            generated_at = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5946),
                            report_type = "Revenue Report"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Services", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("enddate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("policy_id")
                        .HasColumnType("int");

                    b.Property<int>("sort_order")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<DateTime?>("startdate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.HasIndex("policy_id");

                    b.ToTable("services");

                    b.HasData(
                        new
                        {
                            id = 1,
                            CreatedAt = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5870),
                            description = "Full coverage for your vehicle.",
                            enddate = new DateTime(2025, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5866),
                            image = "moto.jpg",
                            policy_id = 1,
                            sort_order = 1,
                            startdate = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5865),
                            status = true,
                            title = "Moto Insurance"
                        },
                        new
                        {
                            id = 2,
                            CreatedAt = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5874),
                            description = "Full coverage for your vehicle.",
                            enddate = new DateTime(2025, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5873),
                            image = "car.jpg",
                            policy_id = 2,
                            sort_order = 1,
                            startdate = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5872),
                            status = true,
                            title = "Car Insurance"
                        },
                        new
                        {
                            id = 3,
                            CreatedAt = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5877),
                            description = "Basic third-party coverage for your vehicle.",
                            enddate = new DateTime(2025, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5876),
                            image = "truck.jpg",
                            policy_id = 3,
                            sort_order = 1,
                            startdate = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5875),
                            status = true,
                            title = "Truck Insurance"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.SpecialInsuranceRequest", b =>
                {
                    b.Property<int>("request_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("request_id"));

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("request_date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("request_description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("request_type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("vehicle_id")
                        .HasColumnType("int");

                    b.HasKey("request_id");

                    b.HasIndex("customer_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("special_insurance_requests");

                    b.HasData(
                        new
                        {
                            request_id = 1,
                            customer_id = 2,
                            request_date = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(6003),
                            request_description = "Requesting additional 2 years of warranty.",
                            request_type = "Extended Warranty",
                            status = "Pending",
                            vehicle_id = 1
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("user_id"));

                    b.Property<string>("address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("avatar")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("full_name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("phone_number")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("user_logs")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("user_id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            user_id = 1,
                            address = "123 Admin Street",
                            avatar = "avatar.png",
                            created_at = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5654),
                            email = "vunnth2307024@fpt.edu.vn",
                            full_name = "Admin User",
                            password = "123",
                            phone_number = "0123456789",
                            role = "admin",
                            user_logs = "Email",
                            username = "admin"
                        },
                        new
                        {
                            user_id = 2,
                            address = "123 Main St, Cityville",
                            avatar = "john_avatar.png",
                            created_at = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5657),
                            email = "vusena3107@gmail.com",
                            full_name = "John Doe",
                            password = "123",
                            phone_number = "0987654321",
                            role = "customer",
                            user_logs = "Login logs",
                            username = "john_doe"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Vehicle", b =>
                {
                    b.Property<int>("vehicle_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("vehicle_id"));

                    b.Property<string>("body_number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<string>("engine_number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("vehicle_model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("vehicle_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("vehicle_rate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("vehicle_version")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("vehicle_id");

                    b.HasIndex("customer_id");

                    b.ToTable("vehicles");

                    b.HasData(
                        new
                        {
                            vehicle_id = 1,
                            body_number = "ABC123XYZ",
                            customer_id = 2,
                            engine_number = "ENG123456789",
                            vehicle_model = "2022",
                            vehicle_name = "Toyota Camry",
                            vehicle_rate = 25000.00m,
                            vehicle_version = "SE"
                        },
                        new
                        {
                            vehicle_id = 2,
                            body_number = "DEF456XYZ",
                            customer_id = 1,
                            engine_number = "ENG987654321",
                            vehicle_model = "2020",
                            vehicle_name = "Honda Accord",
                            vehicle_rate = 22000.00m,
                            vehicle_version = "LX"
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.VehicleImage", b =>
                {
                    b.Property<int>("image_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("image_id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("image_path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("image_type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("uploaded_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("vehicle_id")
                        .HasColumnType("int");

                    b.HasKey("image_id");

                    b.HasIndex("vehicle_id");

                    b.ToTable("vehicle_images");

                    b.HasData(
                        new
                        {
                            image_id = 1,
                            description = "Toyota Camry front view",
                            image_path = "images/vehicle1.jpg",
                            image_type = "Vehicle",
                            uploaded_at = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5791),
                            vehicle_id = 1
                        },
                        new
                        {
                            image_id = 2,
                            description = "Honda Accord side view",
                            image_path = "images/vehicle2.jpg",
                            image_type = "Vehicle",
                            uploaded_at = new DateTime(2024, 12, 16, 22, 34, 39, 291, DateTimeKind.Local).AddTicks(5793),
                            vehicle_id = 2
                        });
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Claim", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("policy_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsurancePolicy");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Comment", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceManage.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("parent_comment_id");

                    b.Navigation("Customer");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Contact", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Customer", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.CustomerSupportRequest", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceManage.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("resolved_by");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Estimate", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceManage.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("vehicle_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.InsuranceHistory", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("changed_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceManage.Models.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("policy_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsurancePolicy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.InsurancePolicy", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id");

                    b.HasOne("CarInsuranceManage.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("vehicle_id");

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Notification", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Payment", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceManage.Models.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("policy_id");

                    b.Navigation("Customer");

                    b.Navigation("InsurancePolicy");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Services", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.InsurancePolicy", "InsurancePolicy")
                        .WithMany()
                        .HasForeignKey("policy_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsurancePolicy");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.SpecialInsuranceRequest", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarInsuranceManage.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("vehicle_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Vehicle", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.VehicleImage", b =>
                {
                    b.HasOne("CarInsuranceManage.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("vehicle_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("CarInsuranceManage.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
